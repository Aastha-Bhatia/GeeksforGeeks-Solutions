class Solution{
    static int dp[][];
    static int knapsack(int W,int val[],int wt[]){
        int n=val.length;
        dp=new int[n+1][W+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=W;j++){
                dp[i][j]=-1;
            }
        }
        return solve(n-1,W,val,wt);
    }
    public static int solve(int ind,int cap,int val[],int wt[]){
        // base case
        if(ind<0){
            return 0;
        }
        // preventing unnecessary calls..
        if(dp[ind][cap]!=-1){
            return dp[ind][cap];
        }
        // pick
        int op1=0;
        if(cap>=wt[ind]){
            op1=val[ind]+solve(ind-1,cap-wt[ind],val,wt);
        }
        // not pick
        int op2=solve(ind-1,cap,val,wt);
        return dp[ind][cap]=Math.max(op1,op2);
    }
}
